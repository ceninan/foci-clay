// Auto-Generated by BindingsGenerator

private alias OpaquePointer = RawPointer;
private alias UnknownType = Int;
private alias AUnionType = Int;


alias dbus_int64_t = Int64;

alias dbus_uint64_t = UInt64;

alias dbus_int32_t = Int;

alias dbus_uint32_t = UInt;

alias dbus_int16_t = Short;

alias dbus_uint16_t = UShort;

alias ptrdiff_t = Int;

alias size_t = UInt;

alias wchar_t = Int;

alias dbus_unichar_t = UInt;

alias dbus_bool_t = UInt;

alias DBusError = Struct_DBusError;

record Struct_DBusError {
    name : Pointer[CChar];
    message : Pointer[CChar];
    dummy1 : UInt;
    dummy2 : UInt;
    dummy3 : UInt;
    dummy4 : UInt;
    dummy5 : UInt;
    padding1 : RawPointer;
}

external dbus_error_init(
    error : Pointer[DBusError]);

external dbus_error_free(
    error : Pointer[DBusError]);

external dbus_set_error(
    error : Pointer[DBusError],
    name : Pointer[CChar],
    message : Pointer[CChar],
    ...);

external dbus_set_error_const(
    error : Pointer[DBusError],
    name : Pointer[CChar],
    message : Pointer[CChar]);

external dbus_move_error(
    src : Pointer[DBusError],
    dest : Pointer[DBusError]);

external dbus_error_has_name(
    error : Pointer[DBusError],
    name : Pointer[CChar]) UInt;

external dbus_error_is_set(
    error : Pointer[DBusError]) UInt;

alias DBusAddressEntry = Opaque;

external dbus_parse_address(
    address : Pointer[CChar],
    entry : Pointer[Pointer[Pointer[DBusAddressEntry]]],
    array_len : Pointer[Int],
    error : Pointer[DBusError]) UInt;

external dbus_address_entry_get_value(
    entry : Pointer[DBusAddressEntry],
    key : Pointer[CChar]) Pointer[CChar];

external dbus_address_entry_get_method(
    entry : Pointer[DBusAddressEntry]) Pointer[CChar];

external dbus_address_entries_free(
    entries : Pointer[Pointer[DBusAddressEntry]]);

external dbus_address_escape_value(
    value : Pointer[CChar]) Pointer[CChar];

external dbus_address_unescape_value(
    value : Pointer[CChar],
    error : Pointer[DBusError]) Pointer[CChar];

external dbus_malloc(
    bytes : UInt) RawPointer;

external dbus_malloc0(
    bytes : UInt) RawPointer;

external dbus_realloc(
    memory : RawPointer,
    bytes : UInt) RawPointer;

external dbus_free(
    memory : RawPointer);

external dbus_free_string_array(
    str_array : Pointer[Pointer[CChar]]);

alias DBusFreeFunction = CCodePointer[(RawPointer),()];

external dbus_shutdown();

alias __gnuc_va_list = Int;

alias va_list = Int;

alias DBusMessage = Opaque;

alias DBusMessageIter = Struct_DBusMessageIter;

record Struct_DBusMessageIter {
    dummy1 : RawPointer;
    dummy2 : RawPointer;
    dummy3 : UInt;
    dummy4 : Int;
    dummy5 : Int;
    dummy6 : Int;
    dummy7 : Int;
    dummy8 : Int;
    dummy9 : Int;
    dummy10 : Int;
    dummy11 : Int;
    pad1 : Int;
    pad2 : Int;
    pad3 : RawPointer;
}

external dbus_message_new(
    message_type : Int) Pointer[DBusMessage];

external dbus_message_new_method_call(
    bus_name : Pointer[CChar],
    path : Pointer[CChar],
    interface : Pointer[CChar],
    method : Pointer[CChar]) Pointer[DBusMessage];

external dbus_message_new_method_return(
    method_call : Pointer[DBusMessage]) Pointer[DBusMessage];

external dbus_message_new_signal(
    path : Pointer[CChar],
    interface : Pointer[CChar],
    name : Pointer[CChar]) Pointer[DBusMessage];

external dbus_message_new_error(
    reply_to : Pointer[DBusMessage],
    error_name : Pointer[CChar],
    error_message : Pointer[CChar]) Pointer[DBusMessage];

external dbus_message_new_error_printf(
    reply_to : Pointer[DBusMessage],
    error_name : Pointer[CChar],
    error_format : Pointer[CChar],
    ...) Pointer[DBusMessage];

external dbus_message_copy(
    message : Pointer[DBusMessage]) Pointer[DBusMessage];

external dbus_message_ref(
    message : Pointer[DBusMessage]) Pointer[DBusMessage];

external dbus_message_unref(
    message : Pointer[DBusMessage]);

external dbus_message_get_type(
    message : Pointer[DBusMessage]) Int;

external dbus_message_set_path(
    message : Pointer[DBusMessage],
    object_path : Pointer[CChar]) UInt;

external dbus_message_get_path(
    message : Pointer[DBusMessage]) Pointer[CChar];

external dbus_message_has_path(
    message : Pointer[DBusMessage],
    object_path : Pointer[CChar]) UInt;

external dbus_message_set_interface(
    message : Pointer[DBusMessage],
    interface : Pointer[CChar]) UInt;

external dbus_message_get_interface(
    message : Pointer[DBusMessage]) Pointer[CChar];

external dbus_message_has_interface(
    message : Pointer[DBusMessage],
    interface : Pointer[CChar]) UInt;

external dbus_message_set_member(
    message : Pointer[DBusMessage],
    member : Pointer[CChar]) UInt;

external dbus_message_get_member(
    message : Pointer[DBusMessage]) Pointer[CChar];

external dbus_message_has_member(
    message : Pointer[DBusMessage],
    member : Pointer[CChar]) UInt;

external dbus_message_set_error_name(
    message : Pointer[DBusMessage],
    name : Pointer[CChar]) UInt;

external dbus_message_get_error_name(
    message : Pointer[DBusMessage]) Pointer[CChar];

external dbus_message_set_destination(
    message : Pointer[DBusMessage],
    destination : Pointer[CChar]) UInt;

external dbus_message_get_destination(
    message : Pointer[DBusMessage]) Pointer[CChar];

external dbus_message_set_sender(
    message : Pointer[DBusMessage],
    sender : Pointer[CChar]) UInt;

external dbus_message_get_sender(
    message : Pointer[DBusMessage]) Pointer[CChar];

external dbus_message_get_signature(
    message : Pointer[DBusMessage]) Pointer[CChar];

external dbus_message_set_no_reply(
    message : Pointer[DBusMessage],
    no_reply : UInt);

external dbus_message_get_no_reply(
    message : Pointer[DBusMessage]) UInt;

external dbus_message_is_method_call(
    message : Pointer[DBusMessage],
    interface : Pointer[CChar],
    method : Pointer[CChar]) UInt;

external dbus_message_is_signal(
    message : Pointer[DBusMessage],
    interface : Pointer[CChar],
    signal_name : Pointer[CChar]) UInt;

external dbus_message_is_error(
    message : Pointer[DBusMessage],
    error_name : Pointer[CChar]) UInt;

external dbus_message_has_destination(
    message : Pointer[DBusMessage],
    bus_name : Pointer[CChar]) UInt;

external dbus_message_has_sender(
    message : Pointer[DBusMessage],
    unique_bus_name : Pointer[CChar]) UInt;

external dbus_message_has_signature(
    message : Pointer[DBusMessage],
    signature : Pointer[CChar]) UInt;

external dbus_message_get_serial(
    message : Pointer[DBusMessage]) UInt;

external dbus_message_set_serial(
    message : Pointer[DBusMessage],
    serial : UInt);

external dbus_message_set_reply_serial(
    message : Pointer[DBusMessage],
    reply_serial : UInt) UInt;

external dbus_message_get_reply_serial(
    message : Pointer[DBusMessage]) UInt;

external dbus_message_set_auto_start(
    message : Pointer[DBusMessage],
    auto_start : UInt);

external dbus_message_get_auto_start(
    message : Pointer[DBusMessage]) UInt;

external dbus_message_get_path_decomposed(
    message : Pointer[DBusMessage],
    path : Pointer[Pointer[Pointer[CChar]]]) UInt;

external dbus_message_append_args(
    message : Pointer[DBusMessage],
    first_arg_type : Int,
    ...) UInt;

external dbus_message_append_args_valist(
    message : Pointer[DBusMessage],
    first_arg_type : Int,
    var_args : Int) UInt;

external dbus_message_get_args(
    message : Pointer[DBusMessage],
    error : Pointer[DBusError],
    first_arg_type : Int,
    ...) UInt;

external dbus_message_get_args_valist(
    message : Pointer[DBusMessage],
    error : Pointer[DBusError],
    first_arg_type : Int,
    var_args : Int) UInt;

external dbus_message_iter_init(
    message : Pointer[DBusMessage],
    iter : Pointer[DBusMessageIter]) UInt;

external dbus_message_iter_has_next(
    iter : Pointer[DBusMessageIter]) UInt;

external dbus_message_iter_next(
    iter : Pointer[DBusMessageIter]) UInt;

external dbus_message_iter_get_signature(
    iter : Pointer[DBusMessageIter]) Pointer[CChar];

external dbus_message_iter_get_arg_type(
    iter : Pointer[DBusMessageIter]) Int;

external dbus_message_iter_get_element_type(
    iter : Pointer[DBusMessageIter]) Int;

external dbus_message_iter_recurse(
    iter : Pointer[DBusMessageIter],
    sub : Pointer[DBusMessageIter]);

external dbus_message_iter_get_basic(
    iter : Pointer[DBusMessageIter],
    value : RawPointer);

external dbus_message_iter_get_array_len(
    iter : Pointer[DBusMessageIter]) Int;

external dbus_message_iter_get_fixed_array(
    iter : Pointer[DBusMessageIter],
    value : RawPointer,
    n_elements : Pointer[Int]);

external dbus_message_iter_init_append(
    message : Pointer[DBusMessage],
    iter : Pointer[DBusMessageIter]);

external dbus_message_iter_append_basic(
    iter : Pointer[DBusMessageIter],
    type : Int,
    value : RawPointer) UInt;

external dbus_message_iter_append_fixed_array(
    iter : Pointer[DBusMessageIter],
    element_type : Int,
    value : RawPointer,
    n_elements : Int) UInt;

external dbus_message_iter_open_container(
    iter : Pointer[DBusMessageIter],
    type : Int,
    contained_signature : Pointer[CChar],
    sub : Pointer[DBusMessageIter]) UInt;

external dbus_message_iter_close_container(
    iter : Pointer[DBusMessageIter],
    sub : Pointer[DBusMessageIter]) UInt;

external dbus_message_iter_abandon_container(
    iter : Pointer[DBusMessageIter],
    sub : Pointer[DBusMessageIter]);

external dbus_message_lock(
    message : Pointer[DBusMessage]);

external dbus_set_error_from_message(
    error : Pointer[DBusError],
    message : Pointer[DBusMessage]) UInt;

external dbus_message_allocate_data_slot(
    slot_p : Pointer[Int]) UInt;

external dbus_message_free_data_slot(
    slot_p : Pointer[Int]);

external dbus_message_set_data(
    message : Pointer[DBusMessage],
    slot : Int,
    data : RawPointer,
    free_data_func : DBusFreeFunction) UInt;

external dbus_message_get_data(
    message : Pointer[DBusMessage],
    slot : Int) RawPointer;

external dbus_message_type_from_string(
    type_str : Pointer[CChar]) Int;

external dbus_message_type_to_string(
    type : Int) Pointer[CChar];

external dbus_message_marshal(
    msg : Pointer[DBusMessage],
    marshalled_data_p : Pointer[Pointer[CChar]],
    len_p : Pointer[Int]) UInt;

external dbus_message_demarshal(
    str : Pointer[CChar],
    len : Int,
    error : Pointer[DBusError]) Pointer[DBusMessage];

external dbus_message_demarshal_bytes_needed(
    str : Pointer[CChar],
    len : Int) Int;

alias DBUS_BUS_SESSION = 0;
alias DBUS_BUS_SYSTEM = 1;
alias DBUS_BUS_STARTER = 2;

alias DBusBusType = Int;

alias DBUS_HANDLER_RESULT_HANDLED = 0;
alias DBUS_HANDLER_RESULT_NOT_YET_HANDLED = 1;
alias DBUS_HANDLER_RESULT_NEED_MEMORY = 2;

alias DBusHandlerResult = Int;

alias DBusWatch = Opaque;

alias DBusTimeout = Opaque;

alias DBusPreallocatedSend = Opaque;

alias DBusPendingCall = Opaque;

alias DBusConnection = Opaque;

alias DBusObjectPathVTable = Struct_DBusObjectPathVTable;

alias DBUS_WATCH_READABLE = 1;
alias DBUS_WATCH_WRITABLE = 2;
alias DBUS_WATCH_ERROR = 4;
alias DBUS_WATCH_HANGUP = 8;

alias DBusWatchFlags = Int;

alias DBUS_DISPATCH_DATA_REMAINS = 0;
alias DBUS_DISPATCH_COMPLETE = 1;
alias DBUS_DISPATCH_NEED_MEMORY = 2;

alias DBusDispatchStatus = Int;

alias DBusAddWatchFunction = CCodePointer[(OpaquePointer,RawPointer),(UInt)];

alias DBusWatchToggledFunction = CCodePointer[(OpaquePointer,RawPointer),()];

alias DBusRemoveWatchFunction = CCodePointer[(OpaquePointer,RawPointer),()];

alias DBusAddTimeoutFunction = CCodePointer[(OpaquePointer,RawPointer),(UInt)];

alias DBusTimeoutToggledFunction = CCodePointer[(OpaquePointer,RawPointer),()];

alias DBusRemoveTimeoutFunction = CCodePointer[(OpaquePointer,RawPointer),()];

alias DBusDispatchStatusFunction = CCodePointer[(OpaquePointer,Int,RawPointer),()];

alias DBusWakeupMainFunction = CCodePointer[(RawPointer),()];

alias DBusAllowUnixUserFunction = CCodePointer[(OpaquePointer,CULong,RawPointer),(UInt)];

alias DBusAllowWindowsUserFunction = CCodePointer[(OpaquePointer,Pointer[CChar],RawPointer),(UInt)];

alias DBusPendingCallNotifyFunction = CCodePointer[(OpaquePointer,RawPointer),()];

alias DBusHandleMessageFunction = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer),(Int)];

external dbus_connection_open(
    address : Pointer[CChar],
    error : Pointer[DBusError]) Pointer[DBusConnection];

external dbus_connection_open_private(
    address : Pointer[CChar],
    error : Pointer[DBusError]) Pointer[DBusConnection];

external dbus_connection_ref(
    connection : Pointer[DBusConnection]) Pointer[DBusConnection];

external dbus_connection_unref(
    connection : Pointer[DBusConnection]);

external dbus_connection_close(
    connection : Pointer[DBusConnection]);

external dbus_connection_get_is_connected(
    connection : Pointer[DBusConnection]) UInt;

external dbus_connection_get_is_authenticated(
    connection : Pointer[DBusConnection]) UInt;

external dbus_connection_get_is_anonymous(
    connection : Pointer[DBusConnection]) UInt;

external dbus_connection_get_server_id(
    connection : Pointer[DBusConnection]) Pointer[CChar];

external dbus_connection_set_exit_on_disconnect(
    connection : Pointer[DBusConnection],
    exit_on_disconnect : UInt);

external dbus_connection_flush(
    connection : Pointer[DBusConnection]);

external dbus_connection_read_write_dispatch(
    connection : Pointer[DBusConnection],
    timeout_milliseconds : Int) UInt;

external dbus_connection_read_write(
    connection : Pointer[DBusConnection],
    timeout_milliseconds : Int) UInt;

external dbus_connection_borrow_message(
    connection : Pointer[DBusConnection]) Pointer[DBusMessage];

external dbus_connection_return_message(
    connection : Pointer[DBusConnection],
    message : Pointer[DBusMessage]);

external dbus_connection_steal_borrowed_message(
    connection : Pointer[DBusConnection],
    message : Pointer[DBusMessage]);

external dbus_connection_pop_message(
    connection : Pointer[DBusConnection]) Pointer[DBusMessage];

external dbus_connection_get_dispatch_status(
    connection : Pointer[DBusConnection]) DBusDispatchStatus;

external dbus_connection_dispatch(
    connection : Pointer[DBusConnection]) DBusDispatchStatus;

external dbus_connection_has_messages_to_send(
    connection : Pointer[DBusConnection]) UInt;

external dbus_connection_send(
    connection : Pointer[DBusConnection],
    message : Pointer[DBusMessage],
    client_serial : Pointer[UInt]) UInt;

external dbus_connection_send_with_reply(
    connection : Pointer[DBusConnection],
    message : Pointer[DBusMessage],
    pending_return : Pointer[Pointer[DBusPendingCall]],
    timeout_milliseconds : Int) UInt;

external dbus_connection_send_with_reply_and_block(
    connection : Pointer[DBusConnection],
    message : Pointer[DBusMessage],
    timeout_milliseconds : Int,
    error : Pointer[DBusError]) Pointer[DBusMessage];

external dbus_connection_set_watch_functions(
    connection : Pointer[DBusConnection],
    add_function : DBusAddWatchFunction,
    remove_function : DBusRemoveWatchFunction,
    toggled_function : DBusWatchToggledFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction) UInt;

external dbus_connection_set_timeout_functions(
    connection : Pointer[DBusConnection],
    add_function : DBusAddTimeoutFunction,
    remove_function : DBusRemoveTimeoutFunction,
    toggled_function : DBusTimeoutToggledFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction) UInt;

external dbus_connection_set_wakeup_main_function(
    connection : Pointer[DBusConnection],
    wakeup_main_function : DBusWakeupMainFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction);

external dbus_connection_set_dispatch_status_function(
    connection : Pointer[DBusConnection],
    function : DBusDispatchStatusFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction);

external dbus_connection_get_unix_user(
    connection : Pointer[DBusConnection],
    uid : Pointer[CULong]) UInt;

external dbus_connection_get_unix_process_id(
    connection : Pointer[DBusConnection],
    pid : Pointer[CULong]) UInt;

external dbus_connection_get_adt_audit_session_data(
    connection : Pointer[DBusConnection],
    data : Pointer[RawPointer],
    data_size : Pointer[Int]) UInt;

external dbus_connection_set_unix_user_function(
    connection : Pointer[DBusConnection],
    function : DBusAllowUnixUserFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction);

external dbus_connection_get_windows_user(
    connection : Pointer[DBusConnection],
    windows_sid_p : Pointer[Pointer[CChar]]) UInt;

external dbus_connection_set_windows_user_function(
    connection : Pointer[DBusConnection],
    function : DBusAllowWindowsUserFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction);

external dbus_connection_set_allow_anonymous(
    connection : Pointer[DBusConnection],
    value : UInt);

external dbus_connection_set_route_peer_messages(
    connection : Pointer[DBusConnection],
    value : UInt);

external dbus_connection_add_filter(
    connection : Pointer[DBusConnection],
    function : DBusHandleMessageFunction,
    user_data : RawPointer,
    free_data_function : DBusFreeFunction) UInt;

external dbus_connection_remove_filter(
    connection : Pointer[DBusConnection],
    function : DBusHandleMessageFunction,
    user_data : RawPointer);

external dbus_connection_allocate_data_slot(
    slot_p : Pointer[Int]) UInt;

external dbus_connection_free_data_slot(
    slot_p : Pointer[Int]);

external dbus_connection_set_data(
    connection : Pointer[DBusConnection],
    slot : Int,
    data : RawPointer,
    free_data_func : DBusFreeFunction) UInt;

external dbus_connection_get_data(
    connection : Pointer[DBusConnection],
    slot : Int) RawPointer;

external dbus_connection_set_change_sigpipe(
    will_modify_sigpipe : UInt);

external dbus_connection_set_max_message_size(
    connection : Pointer[DBusConnection],
    size : CLong);

external dbus_connection_get_max_message_size(
    connection : Pointer[DBusConnection]) CLong;

external dbus_connection_set_max_received_size(
    connection : Pointer[DBusConnection],
    size : CLong);

external dbus_connection_get_max_received_size(
    connection : Pointer[DBusConnection]) CLong;

external dbus_connection_get_outgoing_size(
    connection : Pointer[DBusConnection]) CLong;

external dbus_connection_preallocate_send(
    connection : Pointer[DBusConnection]) Pointer[DBusPreallocatedSend];

external dbus_connection_free_preallocated_send(
    connection : Pointer[DBusConnection],
    preallocated : Pointer[DBusPreallocatedSend]);

external dbus_connection_send_preallocated(
    connection : Pointer[DBusConnection],
    preallocated : Pointer[DBusPreallocatedSend],
    message : Pointer[DBusMessage],
    client_serial : Pointer[UInt]);

alias DBusObjectPathUnregisterFunction = CCodePointer[(OpaquePointer,RawPointer),()];

alias DBusObjectPathMessageFunction = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer),(Int)];

record Struct_DBusObjectPathVTable {
    unregister_function : DBusObjectPathUnregisterFunction;
    message_function : DBusObjectPathMessageFunction;
    dbus_internal_pad1 : CCodePointer[(RawPointer),()];
    dbus_internal_pad2 : CCodePointer[(RawPointer),()];
    dbus_internal_pad3 : CCodePointer[(RawPointer),()];
    dbus_internal_pad4 : CCodePointer[(RawPointer),()];
}

external dbus_connection_try_register_object_path(
    connection : Pointer[DBusConnection],
    path : Pointer[CChar],
    vtable : Pointer[DBusObjectPathVTable],
    user_data : RawPointer,
    error : Pointer[DBusError]) UInt;

external dbus_connection_register_object_path(
    connection : Pointer[DBusConnection],
    path : Pointer[CChar],
    vtable : Pointer[DBusObjectPathVTable],
    user_data : RawPointer) UInt;

external dbus_connection_try_register_fallback(
    connection : Pointer[DBusConnection],
    path : Pointer[CChar],
    vtable : Pointer[DBusObjectPathVTable],
    user_data : RawPointer,
    error : Pointer[DBusError]) UInt;

external dbus_connection_register_fallback(
    connection : Pointer[DBusConnection],
    path : Pointer[CChar],
    vtable : Pointer[DBusObjectPathVTable],
    user_data : RawPointer) UInt;

external dbus_connection_unregister_object_path(
    connection : Pointer[DBusConnection],
    path : Pointer[CChar]) UInt;

external dbus_connection_get_object_path_data(
    connection : Pointer[DBusConnection],
    path : Pointer[CChar],
    data_p : Pointer[RawPointer]) UInt;

external dbus_connection_list_registered(
    connection : Pointer[DBusConnection],
    parent_path : Pointer[CChar],
    child_entries : Pointer[Pointer[Pointer[CChar]]]) UInt;

external dbus_connection_get_unix_fd(
    connection : Pointer[DBusConnection],
    fd : Pointer[Int]) UInt;

external dbus_connection_get_socket(
    connection : Pointer[DBusConnection],
    fd : Pointer[Int]) UInt;

external dbus_watch_get_fd(
    watch : Pointer[DBusWatch]) Int;

external dbus_watch_get_unix_fd(
    watch : Pointer[DBusWatch]) Int;

external dbus_watch_get_socket(
    watch : Pointer[DBusWatch]) Int;

external dbus_watch_get_flags(
    watch : Pointer[DBusWatch]) UInt;

external dbus_watch_get_data(
    watch : Pointer[DBusWatch]) RawPointer;

external dbus_watch_set_data(
    watch : Pointer[DBusWatch],
    data : RawPointer,
    free_data_function : DBusFreeFunction);

external dbus_watch_handle(
    watch : Pointer[DBusWatch],
    flags : UInt) UInt;

external dbus_watch_get_enabled(
    watch : Pointer[DBusWatch]) UInt;

external dbus_timeout_get_interval(
    timeout : Pointer[DBusTimeout]) Int;

external dbus_timeout_get_data(
    timeout : Pointer[DBusTimeout]) RawPointer;

external dbus_timeout_set_data(
    timeout : Pointer[DBusTimeout],
    data : RawPointer,
    free_data_function : DBusFreeFunction);

external dbus_timeout_handle(
    timeout : Pointer[DBusTimeout]) UInt;

external dbus_timeout_get_enabled(
    timeout : Pointer[DBusTimeout]) UInt;

external dbus_bus_get(
    type : DBusBusType,
    error : Pointer[DBusError]) Pointer[DBusConnection];

external dbus_bus_get_private(
    type : DBusBusType,
    error : Pointer[DBusError]) Pointer[DBusConnection];

external dbus_bus_register(
    connection : Pointer[DBusConnection],
    error : Pointer[DBusError]) UInt;

external dbus_bus_set_unique_name(
    connection : Pointer[DBusConnection],
    unique_name : Pointer[CChar]) UInt;

external dbus_bus_get_unique_name(
    connection : Pointer[DBusConnection]) Pointer[CChar];

external dbus_bus_get_unix_user(
    connection : Pointer[DBusConnection],
    name : Pointer[CChar],
    error : Pointer[DBusError]) CULong;

external dbus_bus_get_id(
    connection : Pointer[DBusConnection],
    error : Pointer[DBusError]) Pointer[CChar];

external dbus_bus_request_name(
    connection : Pointer[DBusConnection],
    name : Pointer[CChar],
    flags : UInt,
    error : Pointer[DBusError]) Int;

external dbus_bus_release_name(
    connection : Pointer[DBusConnection],
    name : Pointer[CChar],
    error : Pointer[DBusError]) Int;

external dbus_bus_name_has_owner(
    connection : Pointer[DBusConnection],
    name : Pointer[CChar],
    error : Pointer[DBusError]) UInt;

external dbus_bus_start_service_by_name(
    connection : Pointer[DBusConnection],
    name : Pointer[CChar],
    flags : UInt,
    reply : Pointer[UInt],
    error : Pointer[DBusError]) UInt;

external dbus_bus_add_match(
    connection : Pointer[DBusConnection],
    rule : Pointer[CChar],
    error : Pointer[DBusError]);

external dbus_bus_remove_match(
    connection : Pointer[DBusConnection],
    rule : Pointer[CChar],
    error : Pointer[DBusError]);

external dbus_get_local_machine_id() Pointer[CChar];

external dbus_get_version(
    major_version_p : Pointer[Int],
    minor_version_p : Pointer[Int],
    micro_version_p : Pointer[Int]);

external dbus_pending_call_ref(
    pending : Pointer[DBusPendingCall]) Pointer[DBusPendingCall];

external dbus_pending_call_unref(
    pending : Pointer[DBusPendingCall]);

external dbus_pending_call_set_notify(
    pending : Pointer[DBusPendingCall],
    function : DBusPendingCallNotifyFunction,
    user_data : RawPointer,
    free_user_data : DBusFreeFunction) UInt;

external dbus_pending_call_cancel(
    pending : Pointer[DBusPendingCall]);

external dbus_pending_call_get_completed(
    pending : Pointer[DBusPendingCall]) UInt;

external dbus_pending_call_steal_reply(
    pending : Pointer[DBusPendingCall]) Pointer[DBusMessage];

external dbus_pending_call_block(
    pending : Pointer[DBusPendingCall]);

external dbus_pending_call_allocate_data_slot(
    slot_p : Pointer[Int]) UInt;

external dbus_pending_call_free_data_slot(
    slot_p : Pointer[Int]);

external dbus_pending_call_set_data(
    pending : Pointer[DBusPendingCall],
    slot : Int,
    data : RawPointer,
    free_data_func : DBusFreeFunction) UInt;

external dbus_pending_call_get_data(
    pending : Pointer[DBusPendingCall],
    slot : Int) RawPointer;

alias DBusServer = Opaque;

alias DBusNewConnectionFunction = CCodePointer[(OpaquePointer,OpaquePointer,RawPointer),()];

external dbus_server_listen(
    address : Pointer[CChar],
    error : Pointer[DBusError]) Pointer[DBusServer];

external dbus_server_ref(
    server : Pointer[DBusServer]) Pointer[DBusServer];

external dbus_server_unref(
    server : Pointer[DBusServer]);

external dbus_server_disconnect(
    server : Pointer[DBusServer]);

external dbus_server_get_is_connected(
    server : Pointer[DBusServer]) UInt;

external dbus_server_get_address(
    server : Pointer[DBusServer]) Pointer[CChar];

external dbus_server_get_id(
    server : Pointer[DBusServer]) Pointer[CChar];

external dbus_server_set_new_connection_function(
    server : Pointer[DBusServer],
    function : DBusNewConnectionFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction);

external dbus_server_set_watch_functions(
    server : Pointer[DBusServer],
    add_function : DBusAddWatchFunction,
    remove_function : DBusRemoveWatchFunction,
    toggled_function : DBusWatchToggledFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction) UInt;

external dbus_server_set_timeout_functions(
    server : Pointer[DBusServer],
    add_function : DBusAddTimeoutFunction,
    remove_function : DBusRemoveTimeoutFunction,
    toggled_function : DBusTimeoutToggledFunction,
    data : RawPointer,
    free_data_function : DBusFreeFunction) UInt;

external dbus_server_set_auth_mechanisms(
    server : Pointer[DBusServer],
    mechanisms : Pointer[Pointer[CChar]]) UInt;

external dbus_server_allocate_data_slot(
    slot_p : Pointer[Int]) UInt;

external dbus_server_free_data_slot(
    slot_p : Pointer[Int]);

external dbus_server_set_data(
    server : Pointer[DBusServer],
    slot : Int,
    data : RawPointer,
    free_data_func : DBusFreeFunction) UInt;

external dbus_server_get_data(
    server : Pointer[DBusServer],
    slot : Int) RawPointer;

record UnnamedStruct {
    dummy1 : RawPointer;
    dummy2 : RawPointer;
    dummy8 : UInt;
    dummy12 : Int;
    dummy17 : Int;
}

alias DBusSignatureIter = UnnamedStruct;

external dbus_signature_iter_init(
    iter : Pointer[DBusSignatureIter],
    signature : Pointer[CChar]);

external dbus_signature_iter_get_current_type(
    iter : Pointer[DBusSignatureIter]) Int;

external dbus_signature_iter_get_signature(
    iter : Pointer[DBusSignatureIter]) Pointer[CChar];

external dbus_signature_iter_get_element_type(
    iter : Pointer[DBusSignatureIter]) Int;

external dbus_signature_iter_next(
    iter : Pointer[DBusSignatureIter]) UInt;

external dbus_signature_iter_recurse(
    iter : Pointer[DBusSignatureIter],
    subiter : Pointer[DBusSignatureIter]);

external dbus_signature_validate(
    signature : Pointer[CChar],
    error : Pointer[DBusError]) UInt;

external dbus_signature_validate_single(
    signature : Pointer[CChar],
    error : Pointer[DBusError]) UInt;

external dbus_type_is_basic(
    typecode : Int) UInt;

external dbus_type_is_container(
    typecode : Int) UInt;

external dbus_type_is_fixed(
    typecode : Int) UInt;

alias DBusMutex = Opaque;

alias DBusCondVar = Opaque;

alias DBusMutexNewFunction = CCodePointer[(),(OpaquePointer)];

alias DBusMutexFreeFunction = CCodePointer[(OpaquePointer),()];

alias DBusMutexLockFunction = CCodePointer[(OpaquePointer),(UInt)];

alias DBusMutexUnlockFunction = CCodePointer[(OpaquePointer),(UInt)];

alias DBusRecursiveMutexNewFunction = CCodePointer[(),(OpaquePointer)];

alias DBusRecursiveMutexFreeFunction = CCodePointer[(OpaquePointer),()];

alias DBusRecursiveMutexLockFunction = CCodePointer[(OpaquePointer),()];

alias DBusRecursiveMutexUnlockFunction = CCodePointer[(OpaquePointer),()];

alias DBusCondVarNewFunction = CCodePointer[(),(OpaquePointer)];

alias DBusCondVarFreeFunction = CCodePointer[(OpaquePointer),()];

alias DBusCondVarWaitFunction = CCodePointer[(OpaquePointer,OpaquePointer),()];

alias DBusCondVarWaitTimeoutFunction = CCodePointer[(OpaquePointer,OpaquePointer,Int),(UInt)];

alias DBusCondVarWakeOneFunction = CCodePointer[(OpaquePointer),()];

alias DBusCondVarWakeAllFunction = CCodePointer[(OpaquePointer),()];

alias DBUS_THREAD_FUNCTIONS_MUTEX_NEW_MASK = 1;
alias DBUS_THREAD_FUNCTIONS_MUTEX_FREE_MASK = 2;
alias DBUS_THREAD_FUNCTIONS_MUTEX_LOCK_MASK = 4;
alias DBUS_THREAD_FUNCTIONS_MUTEX_UNLOCK_MASK = 8;
alias DBUS_THREAD_FUNCTIONS_CONDVAR_NEW_MASK = 16;
alias DBUS_THREAD_FUNCTIONS_CONDVAR_FREE_MASK = 32;
alias DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_MASK = 64;
alias DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_TIMEOUT_MASK = 128;
alias DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ONE_MASK = 256;
alias DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ALL_MASK = 512;
alias DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_NEW_MASK = 1024;
alias DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_FREE_MASK = 2048;
alias DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_LOCK_MASK = 4096;
alias DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_UNLOCK_MASK = 8192;
alias DBUS_THREAD_FUNCTIONS_ALL_MASK = 16383;

alias DBusThreadFunctionsMask = Int;

record UnnamedStruct2 {
    mask : UInt;
    mutex_new : DBusMutexNewFunction;
    mutex_free : DBusMutexFreeFunction;
    mutex_lock : DBusMutexLockFunction;
    mutex_unlock : DBusMutexUnlockFunction;
    condvar_new : DBusCondVarNewFunction;
    condvar_free : DBusCondVarFreeFunction;
    condvar_wait : DBusCondVarWaitFunction;
    condvar_wait_timeout : DBusCondVarWaitTimeoutFunction;
    condvar_wake_one : DBusCondVarWakeOneFunction;
    condvar_wake_all : DBusCondVarWakeAllFunction;
    recursive_mutex_new : DBusRecursiveMutexNewFunction;
    recursive_mutex_free : DBusRecursiveMutexFreeFunction;
    recursive_mutex_lock : DBusRecursiveMutexLockFunction;
    recursive_mutex_unlock : DBusRecursiveMutexUnlockFunction;
    padding1 : CCodePointer[(),()];
    padding2 : CCodePointer[(),()];
    padding3 : CCodePointer[(),()];
    padding4 : CCodePointer[(),()];
}

alias DBusThreadFunctions = UnnamedStruct2;

external dbus_threads_init(
    functions : Pointer[DBusThreadFunctions]) UInt;

external dbus_threads_init_default() UInt;
